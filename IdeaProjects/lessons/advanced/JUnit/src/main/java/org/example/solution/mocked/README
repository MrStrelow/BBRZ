Um Komponenten/Units testen zu können welche an einer Datenbank bzw. an einem "Netz" von Abhängigkeiten hängen,
ist es meist kompliziert diese in Isolation zu testen.
Wir sind nicht interessiert an dem gesamten System bei Unit-Tests (das wären Integration Tests, nicht Unit-Tests).
Deshalb können wir diese "Netz" von Abhängigkeiten vortäuschen (mocking) indem wir
so tun als ob z.B. die Datenbank uns mit gewissen Daten antwortet.

Wir schauen uns dazu folgende Klassen an:
- User.java: User DTO
- UserRepository.java: Verbindung zur Datenbank. Das stellt die CRUD (create read update delete) logik dar.
- UserService.java: Ein Service, welcher dann den User DTO nimmt und etwas damit macht.

Wir testen nun den UserService mit einem "gemockten" UserRepository, in der Klasse UserServiceTest.
Wir haben also nicht wirklich eine Verbindung zur Datenbank.

Wir verwenden dazu Mockito welches uns einige Funktionalitäten zur Verfügung stellt.
- Siehe dazu in der UserServiceTest Klasse (diese ist im Test Ordner und nicht in dem Ordner wo wir uns gerade befinden).